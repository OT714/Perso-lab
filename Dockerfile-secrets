# To avoid passing credentials information directly into a Docker image, you can utilize environment variables, Docker secrets, or configuration files outside the image. Here's an explanation of each approach:

Environment Variables:

Instead of hardcoding sensitive data in the Dockerfile, use environment variables to provide them at runtime. When running a container,
you can pass the sensitive information as environment variables using the -e flag or via Docker Compose.
Example Dockerfile:

FROM python:3.9

# Set up the working directory
WORKDIR /app

# Install required dependencies
RUN pip install flask

# Copy the application files to the container
COPY app.py /app.py

# Expose port 5000
EXPOSE 5000

# Run the web application
CMD ["python", "app.py"]


# Example usage during container run:

docker run -e SECRET_KEY=my_secret_key -p 5000:5000 my_web_app


# Docker Secrets (Swarm Mode Only):

In a Docker Swarm, you can use Docker secrets to securely manage sensitive data. Docker secrets are encrypted and only accessible by services within the swarm.
Secrets can be mounted as files in the container, and the application can read them as needed.
Example Dockerfile:

FROM python:3.9

# Set up the working directory
WORKDIR /app

# Install required dependencies
RUN pip install flask

# Copy the application files to the container
COPY app.py /app.py

# Expose port 5000
EXPOSE 5000

# Run the web application
CMD ["python", "app.py"]

Example usage with Docker secrets in Docker Swarm:

# Create a Docker secret
echo "my_secret_key" | docker secret create secret_key -

# Deploy the service using the secret
docker service create --name my_web_app --secret source=secret_key,target=secret_key -p 5000:5000 my_web_app


# Configuration Files:

Store sensitive information in configuration files outside the Docker image. Mount the configuration file into the container during runtime. 
The application inside the container can read the file to access the sensitive data.
Example Dockerfile:

FROM python:3.9

# Set up the working directory
WORKDIR /app

# Install required dependencies
RUN pip install flask

# Copy the application files to the container
COPY app.py /app.py

# Expose port 5000
EXPOSE 5000

# Run the web application
CMD ["python", "app.py"]

Example usage with a configuration file:
# Create a configuration file containing sensitive information
echo "SECRET_KEY=my_secret_key" > config.txt

# Run the container with the configuration file mounted as a volume
docker run -v $(pwd)/config.txt:/app/config.txt -p 5000:5000 my_web_app

